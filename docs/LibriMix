# LibriMix Dataset 处理与 DataLoader 说明

## **1. 代码概述**
本代码定义了一个 **LibriMixDataset** 类用于加载 LibriMix 数据集，并创建了一个 **DataLoader** 进行批量数据处理。

## **2. 主要功能**
- **对齐数据文件**：确保 `mix_clean/`、`s1/` 和 `s2/` 目录下的文件一致。
- **读取音频文件**：使用 `torchaudio` 加载混合语音 (`mix_clean`) 和目标语音 (`s1`, `s2`)。
- **数据预处理**：
  - 确保所有音频是单通道（如果有多通道则取平均）。
  - 处理变长音频，使用 **Padding** 填充，使批量数据长度一致。
- **返回数据**：`mix_wav`、`s1_wav`、`s2_wav` 以及 `sr`（采样率）。

## **3. 代码解析**

### **3.1 LibriMixDataset 类**
该类负责加载数据集，并对齐 `mix_clean/`、`s1/` 和 `s2/` 中的文件。
```python
class LibriMixDataset(Dataset):
    def __init__(self, data_root):
        self.data_root = data_root
        mix_files = set(os.listdir(os.path.join(data_root, "mix_clean")))
        s1_files = set(os.listdir(os.path.join(data_root, "s1")))
        s2_files = set(os.listdir(os.path.join(data_root, "s2")))

        # 取交集,确保文件一致
        common_files = sorted(list(mix_files & s1_files & s2_files))
        self.mix_files = common_files
        self.s1_files = common_files
        self.s2_files = common_files

        print(f"对齐后文件数: {len(self.mix_files)}")
```
**📌 说明：**
- `mix_files`, `s1_files`, `s2_files`：分别存储 `mix_clean/`、`s1/` 和 `s2/` 目录中的文件列表。
- `common_files`：计算交集，确保数据对齐。
- `self.mix_files`, `self.s1_files`, `self.s2_files`：最终存储的数据集文件列表。

### **3.2 读取音频文件**
```python
    def __getitem__(self, idx):
        mix_path = os.path.join(self.data_root, "mix_clean", self.mix_files[idx])
        s1_path = os.path.join(self.data_root, "s1", self.s1_files[idx])
        s2_path = os.path.join(self.data_root, "s2", self.s2_files[idx])
    
        # 读取音频
        mix_wav, sr = torchaudio.load(mix_path)
        s1_wav, _ = torchaudio.load(s1_path)
        s2_wav, _ = torchaudio.load(s2_path)

        # 确保单通道
        mix_wav = mix_wav.mean(dim=0, keepdim=True) if mix_wav.shape[0] > 1 else mix_wav
        s1_wav = s1_wav.mean(dim=0, keepdim=True) if s1_wav.shape[0] > 1 else s1_wav
        s2_wav = s2_wav.mean(dim=0, keepdim=True) if s2_wav.shape[0] > 1 else s2_wav

        return mix_wav, s1_wav, s2_wav, sr
```
**📌 说明：**
- `torchaudio.load()` 读取音频数据。
- **确保单通道**：如果音频是 **多通道**，则计算平均值转换为单通道。

---

### **3.3 处理变长数据 (collate_fn)**
音频数据长度可能不同，因此使用 **填充 (Padding)** 使其对齐。
```python
def collate_fn(batch):
    mix, s1, s2, sr = zip(*batch)

    # 确保所有音频格式为 (1, length)
    mix = [x if x.dim() == 2 else x.unsqueeze(0) for x in mix]
    s1 = [x if x.dim() == 2 else x.unsqueeze(0) for x in s1]
    s2 = [x if x.dim() == 2 else x.unsqueeze(0) for x in s2]

    # 计算最长的音频长度
    max_len = max(x.shape[1] for x in mix)

    # 填充函数
    def pad_audio(wav, target_len):
        pad_size = target_len - wav.shape[1]
        return torch.nn.functional.pad(wav, (0, pad_size))

    mix = torch.stack([pad_audio(x, max_len) for x in mix])
    s1 = torch.stack([pad_audio(x, max_len) for x in s1])
    s2 = torch.stack([pad_audio(x, max_len) for x in s2])

    return mix, s1, s2, sr
```
**📌 说明：**
- **计算最长音频长度**：`max_len = max(x.shape[1] for x in mix)`
- **填充 (Padding)**：`torch.nn.functional.pad()`
- **确保批量数据格式一致**

---

### **3.4 创建 DataLoader**
```python
# 设置数据集路径
data_root = "train-360"
dataset = LibriMixDataset(data_root)

# 创建 DataLoader
dataloader = DataLoader(dataset, batch_size=4, shuffle=True, collate_fn=collate_fn)
```
**📌 说明：**
- `batch_size=4`：一次加载 4 条数据。
- `shuffle=True`：随机打乱数据。
- `collate_fn=collate_fn`：使用 **填充函数** 处理变长数据。

---

## **4. 代码运行示例**
```python
for mix, s1, s2, sr in dataloader:
    print(f"采样率: {sr}")
    print(f"混合音频形状: {mix.shape}")  # (batch_size, 1, max_samples)
    break
```
运行后，你应该看到：
```
采样率: 8000
混合音频形状: torch.Size([4, 1, 32000])
```

---

## **5. 关键优化点**
✅ **对齐数据文件**，确保 `mix_clean/`、`s1/`、`s2/` 一致
✅ **自动处理多通道音频**，转换为单通道
✅ **使用 `collate_fn` 处理变长数据**，确保 DataLoader 生成对齐数据
✅ **支持批量加载**，提高训练效率

---

